frontend/node_modules/

# Output
frontend/.output
frontend/.vercel
frontend/.netlify
frontend/.wrangler
frontend/.svelte-kit
frontend/build

# OS
.DS_Store
Thumbs.db

# Env
backend/.env
backend/.env.*
backend/!.env.example
backend/!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

frontend/static/ecosystem_image.png
frontend/static/assets/fonts/
frontend/src/lib/stories/open-academic-analytics/venv/
frontend/src/lib/stories/open-academic-analytics/.tmp_*

frontend/src/lib/stories/open-academic-analytics/data/processed/
frontend/src/lib/stories/open-academic-analytics/data/raw/
frontend/src/lib/stories/open-academic-analytics/:memory*
frontend/src/lib/stories/open-academic-analytics/assets/fit/stan/*
frontend/!src/lib/stories/open-academic-analytics/assets/fit/stan/*.stan
frontend/src/lib/stories/open-academic-analytics/open_academic_analytics.egg-info/

frontend/src/lib/stories/open-academic-analyticsOld/
frontend/src/lib/stories/open-academic-analytics/backend/.tmp_*


# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
*uv.lock

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# mkdocs documentation
/site

# Pyre type checker
.pyre/


# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# PyPI configuration file
.pypirc
frontend/.mcp.json
backend/scripts/academic-research-groups/import/*.csv
backend/scripts/academic-research-groups/input/*.pdf
backend/scripts/academic-research-groups/hand/academic-research-groups.parquet
backend/projects/data-luminosity/scripts/results/
*.hpp
